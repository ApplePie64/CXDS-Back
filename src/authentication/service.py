from .dependencies import supabase
from .schemas import UserCreate, UserUpdate
from datetime import datetime

# Get current time with timezone

USERS_TABLE = "users"


def create_user(user_data: UserCreate, supabase_user_id: str) -> dict:
    """
    Create a new user in the users table.
    The Supabase user ID is passed after being generated during authentication registration.
    """
    # Prepare the user data for insertion
    user_entry = {
        "id": supabase_user_id,  # Use the UUID generated by Supabase Authentication
        "username": user_data.username,
        "name": user_data.name,
        "identity": user_data.identity,
        #"vibe": user_data.vibe,
        "created_at": datetime.now().strftime("%Y-%m-%d"),
        "email": user_data.email,
        "dob": user_data.dob.isoformat(),
        "updated_at": datetime.now().strftime("%Y-%m-%d"),
        "phone_number" : user_data.phonenumber,
        
    }
    print(user_entry)

    # Execute the insert operation
    try:
        response = supabase.table(USERS_TABLE).insert(user_entry).execute()
        if response.data is None:
            raise Exception("User creation failed")

        personalization_entry = {
            "id": supabase_user_id, 
        }

        personalization_response = supabase.table("personalization").insert(personalization_entry).execute()

        if personalization_response.data is None:
            raise Exception("Failed to insert user ID into personalization table")

    except Exception as e:
        raise Exception(f"Error creating user or inserting into personalization: {str(e)}")

    return {
        "user_data": response.data,
        "personalization_status": personalization_response.data
    }   


def get_user_by_id(user_id: str) -> dict:
    """
    Retrieve a user by their Supabase ID.
    """
    response = supabase.table(USERS_TABLE).select("*").eq("id", user_id).execute()
    if not response.data:
        return None
    return response.data[0]


def update_user(user_id: str, user_data: UserUpdate) -> dict:
    """
    Update user information in the users table.
    """
    update_data = {k: v for k, v in user_data.dict(exclude_none=True).items()}
    try:
        response = supabase.table(USERS_TABLE).update(update_data).eq("id", user_id).execute()
    except Exception as e:
        raise Exception(f"Error updating user: {response.error.message}")
    return response.data


def delete_user(user_id: str) -> dict:
    """
    Delete a user from the users table.
    """
    response = supabase.table(USERS_TABLE).delete().eq("id", user_id).execute()
    if response.error:
        raise Exception(f"Error deleting user: {response.error.message}")
    return response.data
