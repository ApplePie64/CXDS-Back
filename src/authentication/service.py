from .dependencies import supabase
from .schemas import UserCreate, UserUpdate

USERS_TABLE = "users"


def create_user(user_data: UserCreate, supabase_user_id: str) -> dict:
    """
    Create a new user in the users table.
    The Supabase user ID is passed after being generated during authentication registration.
    """
    # Prepare the user data for insertion
    user_entry = {
        "id": supabase_user_id,  # Use the UUID generated by Supabase Authentication
        "username": user_data.username,
        "name": user_data.name,
        "identity": user_data.identity,
        "vibe": user_data.vibe,
    }

    # Execute the insert operation
    try:
        response = supabase.table(USERS_TABLE).insert(user_entry).execute()

    # Check for errors in the response
    except Exception as e:  # Supabase response includes "error" in the returned dictionary
        raise Exception(f"Error creating user in the database: {str(e)}")

    # Return the inserted data
    return response.data


def get_user_by_id(user_id: str) -> dict:
    """
    Retrieve a user by their Supabase ID.
    """
    response = supabase.table(USERS_TABLE).select("*").eq("id", user_id).execute()
    if not response.data:
        return None
    return response.data[0]


def update_user(user_id: str, user_data: UserUpdate) -> dict:
    """
    Update user information in the users table.
    """
    update_data = {k: v for k, v in user_data.dict(exclude_none=True).items()}

    response = supabase.table(USERS_TABLE).update(update_data).eq("id", user_id).execute()
    if response.error:
        raise Exception(f"Error updating user: {response.error.message}")
    return response.data


def delete_user(user_id: str) -> dict:
    """
    Delete a user from the users table.
    """
    response = supabase.table(USERS_TABLE).delete().eq("id", user_id).execute()
    if response.error:
        raise Exception(f"Error deleting user: {response.error.message}")
    return response.data
